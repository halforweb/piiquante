//* import the sauce model
const Sauce = require('../models/sauce');

//* import the file system package from node
const fs = require('fs');

//* define and export the function allowing to get all the sauce
exports.getAllSauce = (req, res, next) => {
    Sauce.find()
        .then(sauces => res.status(200).json(sauces))
        .catch(error => res.status(400).json({ error }));
};

//* define and export the function allowing to get the sauce with a specific id
exports.getOneSauce = (req, res, next) => {
    Sauce.findOne({ _id: req.params.id })
        .then((sauce) => res.status(200).json(sauce))
        .catch((error) => res.status(404).json({ error }));
};

//* define and export the function allowing to create a sauce
exports.createSauce = (req, res, next) => {
    const sauceObject = JSON.parse(req.body.sauce); //* parsing the response to manipulate elements
    delete sauceObject._id; //* delete the id of the new sauce object created in the DB as it's generated by the ID
    delete sauceObject._userId; //* delete the userId of the sauce object created in the DB to ensure ressource created by authentified user
    //* create a new sauce object from the body with extraction of the id from the auth middleware and generation of the url for the image
    const sauce = new Sauce({
        ...sauceObject,
        userId: req.auth.userId,
        imageUrl: `${req.protocol}://${req.get('host')}/images/${req.file.filename}`,
    });

    sauce.save()
        .then(() => res.status(201).json({ message: 'Sauce saved successfully!' }))
        .catch(error => res.status(400).json({ error }));
};

//* define and export the function allowing to modify a sauce
exports.modifyOneSauce = (req, res, next) => {
    //* check if there is a field 'file' in the request 
    const sauceObject = req.file ? {
        ...JSON.parse(req.body.sauce), //* get the object by parsing the body of the request
        imageUrl: `${req.protocol}://${req.get('host')}/images/${req.file.filename}` //*create a new url for the image
    } : { ...req.body }; //* if not, we just collect the object details from the request

    delete sauceObject._userId; //* delete the userId
    Sauce.findOne({ _id: req.params.id }) //* looking for the sauce
        .then((sauce) => {
            //* check the userId from the request is equal to the one in the DB
            if (sauce.userId != req.auth.userId) {
                res.status(401).json({ message: 'Not authorized' });
            }
            //* update the sauce with new infos
            else {
                Sauce.updateOne({ _id: req.params.id }, { ...sauceObject, _id: req.params.id })
                    .then(() => res.status(200).json({ message: 'Sauce updated successfully!' }))
                    .catch(error => res.status(401).json({ error }));
            }
        })
        .catch((error) => {
            res.status(400).json({ error });
        });
};

//* define and export the function allowing to delete a sauce
exports.deleteOneSauce = (req, res, next) => {
    Sauce.findOne({ _id: req.params.id }) //* looking for the sauce
        .then(sauce => {
            //* check the userId from the request is equal to the one in the DB
            if (sauce.userId != req.auth.userId) {
                res.status(401).json({ message: 'Not authorized' });
            } else {
                //* get the image 
                const filename = sauce.imageUrl.split('/images/')[1];
                //* delete the image from the folder images and the record in the database related to the sauce with relevant id selected
                fs.unlink(`images/${filename}`, () => {
                    Sauce.deleteOne({ _id: req.params.id })
                        .then(() => { res.status(200).json({ message: 'Sauce deleted successfully !' }) })
                        .catch(error => res.status(401).json({ error }));
                });
            }
        })
        .catch(error => {
            res.status(500).json({ error });
        });
};



